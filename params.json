{"name":"Redcapped","tagline":"a .NET message queue system built on top of MongoDb.","body":"# Red Capped\r\na .NET message queue system built on top of MongoDb.\r\n\r\n[![Build status](https://ci.appveyor.com/api/projects/status/34vnj5l5gdu6i3t4?svg=true)](https://ci.appveyor.com/project/petrhaus/redcapped)\r\n## How to publish messages \r\n\r\n```csharp\r\n// the payload of your message\r\npublic class Order\r\n{\r\n  public int Id { get; set; }\r\n  public decimal Amount { get; set; }\r\n  ...\r\n}\r\n\r\n// create the queues manager\r\nvar manager = new RedCappedQueueManager(\"mongodb://localhost\", \"mydb\");\r\n// create the queue\r\nvar queue = await manager.CreateQueue<Order>(queueName, 256*1024*1024);\r\n// publish!\r\nawait queue.PublishAsync(\"new-orders\", new Order { Id = 123, Amount = 120M });\r\n```\r\n## How to subscribe and receive messages\r\n\r\n```csharp\r\npublic class Order\r\n{\r\n  public int Id { get; set; }\r\n  public decimal Amount { get; set; }\r\n  ...\r\n}\r\n\r\n// create the queues manager\r\nvar manager = new RedCappedQueueManager(\"mongodb://localhost\", \"mydb\");\r\n// create the queue\r\nvar queue = await manager.CreateQueue<Order>(queueName, 256*1024*1024);\r\n// subscribe the topic 'new-orders'\r\nqueue.Subscribe(\"new-orders\", order =>\r\n{\r\n  Debug.WriteLine(\"Order #{0} amount {1}\", order.Id, order.Amount);\r\n  // if the message was handled, otherwise it will be requeued\r\n  return true;\r\n});\r\n```\r\nN.B.This is a work in progress and is subject to change, use it at your own risk!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}